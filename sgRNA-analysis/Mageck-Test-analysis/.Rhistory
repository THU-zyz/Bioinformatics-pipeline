# 选择df中的sgrna、Gene、LFC以及FDR列
df <- df[,c('sgrna', 'Gene', 'LFC', 'FDR')]
# 由于数据中包含一部分非记忆的sgRNA片段，在正常分析流程中这一部分片段将作为背景。
# 匹配Gene列中以Intergenic开头的Gene,将其的sig列标记为nontargeted
df_control<-df%>%mutate(sig=ifelse(grepl("^Intergenic",Gene),"nontargeted","targeted"))
# 将sig=='nontargeted'的数据提取出来作为control.
df_control <- df_control[df_control[,'sig']=='nontargeted',]
df_control <- df_control[,c('sgrna', 'Gene', 'LFC', 'FDR')]
# 筛选出指定的geneset
subdf_geneset<-df[df[,'Gene']%in%geneset,]
# 为df_control、subdf_geneset匹配上相应的颜色
df_control$color <- "ctrl"
subdf_geneset$color <- "Down"
# 如果有多个subdf则用rbind将它们合并在一起。
subdf<-subdf_geneset
Gene <- unique(subdf$Gene)
subdf$Gene <- factor(subdf$Gene, levels = geneset)
subdf <- subdf[order(subdf$Gene), ]
# 根据Gene的长度来扩增df_control的长度。
df_control <- do.call("rbind", replicate(length(Gene), df_control, simplify = FALSE))
# 计算画图参数，
subdf$index <- rep(1:length(Gene), as.numeric(table(subdf$Gene)[Gene]))
subdf$yend <- (binwidth + interval) * subdf$index - interval
subdf$y <- (binwidth + interval) * (subdf$index - 1)
df_control$index <- rep(1:length(Gene), rep(length(unique(df_control$sgrna)), length(Gene)))
df_control$yend <- (binwidth + interval) * df_control$index - interval
df_control$y <- (binwidth + interval) * (df_control$index - 1)
# 对subdf的FDR进行整合，当lfc<0时,取neg.fdr的值，当lfc>0时取pos.fdr的值。
subdf$all_FDR <- 0
for (gene in Gene) {
gene_lfc <- df_gene[gene,'neg.lfc']
if (gene_lfc < 0) {
gene_fdr <- df_gene[gene,'neg.fdr']
} else {
gene_fdr <- df_gene[gene,'pos.fdr']
}
subdf[subdf[,'Gene']==gene,'all_FDR'] <- gene_fdr
}
# 对subdf的p.value进行整合，当lfc<0时，取neg.p.value的值；
# 当lfc>0时，取pos.p.value的值。
subdf$all_pvalue <- 0
for (gene in Gene) {
gene_pvalue <- df_gene[gene,'neg.p.value']
if (df_gene[gene,"neg.lfc"] < 0) {
gene_pvalue <- df_gene[gene,'neg.p.value']
} else {
gene_pvalue <- df_gene[gene,'pos.p.value']
}
subdf[subdf[,'Gene']==gene,'all_pvalue'] <- gene_pvalue
}
a <- -Inf
b <- Inf
bindex <- as.vector(sapply(seq(1, max(subdf$index), 1),
function(x) {
rep(x, 4)
}))
bgcol <- data.frame(as.vector(bindex))
bgcol$color <- c(rep("bg", length(bindex)))
colnames(bgcol) <- c("id", "value")
bgcol$x <- rep(c(a, b, b, a), max(subdf$index))
bgcol$y <- as.vector(sapply(seq(1, max(subdf$index), 1),
function(x) {
c((interval + binwidth) * (x - 1), (interval + binwidth) *
(x - 1), (interval + binwidth) * x - interval,
(interval + binwidth) * x - interval)
}))
# 这里选择pvalue作为筛选条件
label_list <- subdf[,c("Gene", "index", "all_pvalue")]
label_list <- label_list[order(label_list$index,decreasing = F),]
tmp_lab_dat <- as.data.frame(matrix(1:ncol(label_list),nrow = 1))
colnames(tmp_lab_dat) <- colnames(label_list)
tmp_lab_dat <- tmp_lab_dat[-1,]
for (i in unique(label_list$index)) {
ind_dat  <- label_list[label_list$index==i,]
ind_dat <- ind_dat[1,]
tmp_lab_dat <- rbind(tmp_lab_dat,ind_dat)
}
label_list <- tmp_lab_dat
# 为pvalue 贴上显著性标签，当pvalue>0.05为ns,当pvalue<=0.05为*,当pvalue<=0.01为**，当pvalue<0.001为***。
label_list$pvalue_label <- "a"
for (i in 1:nrow(label_list)) {
if (label_list[i,'all_pvalue']>0.05) {
label_list[i,'pvalue_label'] <- "ns"
}else if (label_list[i,'all_pvalue']<=0.05 & label_list[i,'all_pvalue']>0.01){
label_list[i,'pvalue_label'] <- "*"
}else if (label_list[i,'all_pvalue']<=0.01 & label_list[i,'all_pvalue']>0.001){
label_list[i,'pvalue_label'] <- "**"
}else{
label_list[i,'pvalue_label'] <- "***"
}
}
label_list <- label_list$pvalue_label
# 为不同类型的基因设置不同颜色。
cols <- c(Up = "#E41A1C", Down = "#377EB8", ctrl = "#4DAF4A" , tbg = 608, black = "black")
# 绘制条形码图，其中y轴上，每一行代表一个基因，x轴为LFC的分布轴，每一个条带上的竖线代表这个基因对应的sgRNA在LFC上所在位置
p <- ggplot()
p <- p + geom_polygon(aes_string("x", "y", fill = "value",
group = "id"), color = "gray20", data = bgcol, size = 0.5)
#p <- p + geom_segment(aes_string("LFC", "y", xend = "LFC",
#                                 yend = "yend", color = "color"), size = 0.5, alpha = 0.1, data = df_control)
p <- p + geom_segment(aes_string("LFC", "y", xend = "LFC", yend = "yend", color = "color"), size = 0.8, data = subdf)
p
p <- p + scale_color_manual(values = cols)
p <- p + scale_fill_manual(values = c(bg = 'white'))
p <- p + scale_y_continuous(breaks = bgcol$y[seq(1, nrow(bgcol),4)] + binwidth/2,
labels = geneset,
expand = c(0, 0))
p <- p + labs(x = 'LFC', y = NULL)
# 设置坐标轴字体、颜色
p <- p + theme(text = element_text(colour = "black", size = 18),
plot.title = element_text(hjust = 0.5, size = 18),
axis.text = element_text(colour = "gray10"),
axis.text.y = element_text(face = "italic"),
axis.ticks.y = element_blank(),)
p <- p + theme(axis.line = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(fill=NA, color="black", size=1, linetype="solid"),
panel.background = element_blank())
# 设置是否设立图例
p <- p + theme(legend.position = "none")
# 设置辅助线
p <- p + geom_vline(xintercept =c(0),linetype = 3)
# p <- p + xlim(-5,5)
# 设置显示范围。
p <- p + xlim(-11,11)
# 绘制sgRNA显著性标志
panel_ann <- ggplot()+
annotate("text",x = 0,y = bgcol$y[seq(1, nrow(bgcol),4)] + binwidth/2,label =label_list)  +
theme_void() +
theme(text = element_text(colour = "black", size = 18)) +
xlab("") +ylab("") + scale_y_continuous(breaks = bgcol$y[seq(1, nrow(bgcol),4)] + binwidth/2,label=rep("",length(label_list)), expand = c(0, 0))
df_noctrl<-df%>%mutate(sig=ifelse(grepl("^Intergenic",Gene)|grepl("^Offtarget",Gene),"nontargeted","targeted"))
df_noctrl<-df_noctrl%>%filter(sig!="nontargeted")
# 绘制sgRNA分布密度图
density_plot <- ggplot(df_noctrl,aes(x = LFC)) +
geom_density(color = "black",fill = "gray") +
xlab("") + ylab("") +
# ggtitle('PANC02 E:T=1:1') +
ggtitle('Negative regulators') +
theme_bw() +
theme(panel.border = element_rect(fill=NA, color="black", size=1, linetype="solid"),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
plot.title = element_text(hjust = 0.5)) +
annotate("text", x = Inf, y = Inf, label = 'All sgRNAs', vjust = 1.8, hjust = 1.4)
p <- p %>% insert_right(panel_ann,width = 0.1) %>% insert_top(density_plot,height = 0.15)
return(p)
}
sgRNA_analysis4sgrna(sgrna_summary_path,gene_summary_path, gene_list, binwidth = 0.1,interval = 0)
##### sgrna summary 结果文件数据分析 #####
sgRNA_analysis4sgrna<-function(sgrna_summary_path,gene_summary_path, geneset, output_path, title_name, binwidth = 0.1,interval = 0){
# 读取sgRNA_summary与gene_summary文件
df = read.table(sgrna_summary_path, sep='\t', header=TRUE)
df_gene = read.table(gene_summary_path, sep='\t', header=TRUE, row.names=1)
# 选择df中的sgrna、Gene、LFC以及FDR列
df <- df[,c('sgrna', 'Gene', 'LFC', 'FDR')]
# 由于数据中包含一部分非记忆的sgRNA片段，在正常分析流程中这一部分片段将作为背景。
# 匹配Gene列中以Intergenic开头的Gene,将其的sig列标记为nontargeted
df_control<-df%>%mutate(sig=ifelse(grepl("^Intergenic",Gene),"nontargeted","targeted"))
# 将sig=='nontargeted'的数据提取出来作为control.
df_control <- df_control[df_control[,'sig']=='nontargeted',]
df_control <- df_control[,c('sgrna', 'Gene', 'LFC', 'FDR')]
# 筛选出指定的geneset
subdf_geneset<-df[df[,'Gene']%in%geneset,]
# 为df_control、subdf_geneset匹配上相应的颜色
df_control$color <- "ctrl"
subdf_geneset$color <- "Down"
# 如果有多个subdf则用rbind将它们合并在一起。
subdf<-subdf_geneset
Gene <- unique(subdf$Gene)
subdf$Gene <- factor(subdf$Gene, levels = geneset)
subdf <- subdf[order(subdf$Gene), ]
# 根据Gene的长度来扩增df_control的长度。
df_control <- do.call("rbind", replicate(length(Gene), df_control, simplify = FALSE))
# 计算画图参数，
subdf$index <- rep(1:length(Gene), as.numeric(table(subdf$Gene)[Gene]))
subdf$yend <- (binwidth + interval) * subdf$index - interval
subdf$y <- (binwidth + interval) * (subdf$index - 1)
df_control$index <- rep(1:length(Gene), rep(length(unique(df_control$sgrna)), length(Gene)))
df_control$yend <- (binwidth + interval) * df_control$index - interval
df_control$y <- (binwidth + interval) * (df_control$index - 1)
# 对subdf的FDR进行整合，当lfc<0时,取neg.fdr的值，当lfc>0时取pos.fdr的值。
subdf$all_FDR <- 0
for (gene in Gene) {
gene_lfc <- df_gene[gene,'neg.lfc']
if (gene_lfc < 0) {
gene_fdr <- df_gene[gene,'neg.fdr']
} else {
gene_fdr <- df_gene[gene,'pos.fdr']
}
subdf[subdf[,'Gene']==gene,'all_FDR'] <- gene_fdr
}
# 对subdf的p.value进行整合，当lfc<0时，取neg.p.value的值；
# 当lfc>0时，取pos.p.value的值。
subdf$all_pvalue <- 0
for (gene in Gene) {
gene_pvalue <- df_gene[gene,'neg.p.value']
if (df_gene[gene,"neg.lfc"] < 0) {
gene_pvalue <- df_gene[gene,'neg.p.value']
} else {
gene_pvalue <- df_gene[gene,'pos.p.value']
}
subdf[subdf[,'Gene']==gene,'all_pvalue'] <- gene_pvalue
}
a <- -Inf
b <- Inf
bindex <- as.vector(sapply(seq(1, max(subdf$index), 1),
function(x) {
rep(x, 4)
}))
bgcol <- data.frame(as.vector(bindex))
bgcol$color <- c(rep("bg", length(bindex)))
colnames(bgcol) <- c("id", "value")
bgcol$x <- rep(c(a, b, b, a), max(subdf$index))
bgcol$y <- as.vector(sapply(seq(1, max(subdf$index), 1),
function(x) {
c((interval + binwidth) * (x - 1), (interval + binwidth) *
(x - 1), (interval + binwidth) * x - interval,
(interval + binwidth) * x - interval)
}))
# 这里选择pvalue作为筛选条件
label_list <- subdf[,c("Gene", "index", "all_pvalue")]
label_list <- label_list[order(label_list$index,decreasing = F),]
tmp_lab_dat <- as.data.frame(matrix(1:ncol(label_list),nrow = 1))
colnames(tmp_lab_dat) <- colnames(label_list)
tmp_lab_dat <- tmp_lab_dat[-1,]
for (i in unique(label_list$index)) {
ind_dat  <- label_list[label_list$index==i,]
ind_dat <- ind_dat[1,]
tmp_lab_dat <- rbind(tmp_lab_dat,ind_dat)
}
label_list <- tmp_lab_dat
# 为pvalue 贴上显著性标签，当pvalue>0.05为ns,当pvalue<=0.05为*,当pvalue<=0.01为**，当pvalue<0.001为***。
label_list$pvalue_label <- "a"
for (i in 1:nrow(label_list)) {
if (label_list[i,'all_pvalue']>0.05) {
label_list[i,'pvalue_label'] <- "ns"
}else if (label_list[i,'all_pvalue']<=0.05 & label_list[i,'all_pvalue']>0.01){
label_list[i,'pvalue_label'] <- "*"
}else if (label_list[i,'all_pvalue']<=0.01 & label_list[i,'all_pvalue']>0.001){
label_list[i,'pvalue_label'] <- "**"
}else{
label_list[i,'pvalue_label'] <- "***"
}
}
label_list <- label_list$pvalue_label
# 为不同类型的基因设置不同颜色。
cols <- c(Up = "#E41A1C", Down = "#377EB8", ctrl = "#4DAF4A" , tbg = 608, black = "black")
# 绘制条形码图，其中y轴上，每一行代表一个基因，x轴为LFC的分布轴，每一个条带上的竖线代表这个基因对应的sgRNA在LFC上所在位置
p <- ggplot()
p <- p + geom_polygon(aes_string("x", "y", fill = "value",
group = "id"), color = "gray20", data = bgcol, size = 0.5)
#p <- p + geom_segment(aes_string("LFC", "y", xend = "LFC",
#                                 yend = "yend", color = "color"), size = 0.5, alpha = 0.1, data = df_control)
p <- p + geom_segment(aes_string("LFC", "y", xend = "LFC", yend = "yend", color = "color"), size = 0.8, data = subdf)
p
p <- p + scale_color_manual(values = cols)
p <- p + scale_fill_manual(values = c(bg = 'white'))
p <- p + scale_y_continuous(breaks = bgcol$y[seq(1, nrow(bgcol),4)] + binwidth/2,
labels = geneset,
expand = c(0, 0))
p <- p + labs(x = 'LFC', y = NULL)
# 设置坐标轴字体、颜色
p <- p + theme(text = element_text(colour = "black", size = 18),
plot.title = element_text(hjust = 0.5, size = 18),
axis.text = element_text(colour = "gray10"),
axis.text.y = element_text(face = "italic"),
axis.ticks.y = element_blank(),)
p <- p + theme(axis.line = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(fill=NA, color="black", size=1, linetype="solid"),
panel.background = element_blank())
# 设置是否设立图例
p <- p + theme(legend.position = "none")
# 设置辅助线
p <- p + geom_vline(xintercept =c(0),linetype = 3)
# p <- p + xlim(-5,5)
# 设置显示范围。
p <- p + xlim(-11,11)
# 绘制sgRNA显著性标志
panel_ann <- ggplot()+
annotate("text",x = 0,y = bgcol$y[seq(1, nrow(bgcol),4)] + binwidth/2,label =label_list)  +
theme_void() +
theme(text = element_text(colour = "black", size = 18)) +
xlab("") +ylab("") + scale_y_continuous(breaks = bgcol$y[seq(1, nrow(bgcol),4)] + binwidth/2,label=rep("",length(label_list)), expand = c(0, 0))
df_noctrl<-df%>%mutate(sig=ifelse(grepl("^Intergenic",Gene)|grepl("^Offtarget",Gene),"nontargeted","targeted"))
df_noctrl<-df_noctrl%>%filter(sig!="nontargeted")
# 绘制sgRNA分布密度图
density_plot <- ggplot(df_noctrl,aes(x = LFC)) +
geom_density(color = "black",fill = "gray") +
xlab("") + ylab("") +
# ggtitle('PANC02 E:T=1:1') +
ggtitle('Negative regulators') +
theme_bw() +
theme(panel.border = element_rect(fill=NA, color="black", size=1, linetype="solid"),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
plot.title = element_text(hjust = 0.5)) +
annotate("text", x = Inf, y = Inf, label = 'All sgRNAs', vjust = 1.8, hjust = 1.4)
p <- p %>% insert_right(panel_ann,width = 0.1) %>% insert_top(density_plot,height = 0.15)
ggsave(p2,file=paste0(output_path,'sgrna/',title_name," Negative_regulators.pdf"),width=11.69,height=8.27)
}
sgRNA_analysis4sgrna(sgrna_summary_path,gene_summary_path, gene_list, output_path, title_name, binwidth = 0.1,interval = 0)
##### sgrna summary 结果文件数据分析 #####
sgRNA_analysis4sgrna<-function(sgrna_summary_path,gene_summary_path, geneset, output_path, title_name, binwidth = 0.1,interval = 0){
# 读取sgRNA_summary与gene_summary文件
df = read.table(sgrna_summary_path, sep='\t', header=TRUE)
df_gene = read.table(gene_summary_path, sep='\t', header=TRUE, row.names=1)
# 选择df中的sgrna、Gene、LFC以及FDR列
df <- df[,c('sgrna', 'Gene', 'LFC', 'FDR')]
# 由于数据中包含一部分非记忆的sgRNA片段，在正常分析流程中这一部分片段将作为背景。
# 匹配Gene列中以Intergenic开头的Gene,将其的sig列标记为nontargeted
df_control<-df%>%mutate(sig=ifelse(grepl("^Intergenic",Gene),"nontargeted","targeted"))
# 将sig=='nontargeted'的数据提取出来作为control.
df_control <- df_control[df_control[,'sig']=='nontargeted',]
df_control <- df_control[,c('sgrna', 'Gene', 'LFC', 'FDR')]
# 筛选出指定的geneset
subdf_geneset<-df[df[,'Gene']%in%geneset,]
# 为df_control、subdf_geneset匹配上相应的颜色
df_control$color <- "ctrl"
subdf_geneset$color <- "Down"
# 如果有多个subdf则用rbind将它们合并在一起。
subdf<-subdf_geneset
Gene <- unique(subdf$Gene)
subdf$Gene <- factor(subdf$Gene, levels = geneset)
subdf <- subdf[order(subdf$Gene), ]
# 根据Gene的长度来扩增df_control的长度。
df_control <- do.call("rbind", replicate(length(Gene), df_control, simplify = FALSE))
# 计算画图参数，
subdf$index <- rep(1:length(Gene), as.numeric(table(subdf$Gene)[Gene]))
subdf$yend <- (binwidth + interval) * subdf$index - interval
subdf$y <- (binwidth + interval) * (subdf$index - 1)
df_control$index <- rep(1:length(Gene), rep(length(unique(df_control$sgrna)), length(Gene)))
df_control$yend <- (binwidth + interval) * df_control$index - interval
df_control$y <- (binwidth + interval) * (df_control$index - 1)
# 对subdf的FDR进行整合，当lfc<0时,取neg.fdr的值，当lfc>0时取pos.fdr的值。
subdf$all_FDR <- 0
for (gene in Gene) {
gene_lfc <- df_gene[gene,'neg.lfc']
if (gene_lfc < 0) {
gene_fdr <- df_gene[gene,'neg.fdr']
} else {
gene_fdr <- df_gene[gene,'pos.fdr']
}
subdf[subdf[,'Gene']==gene,'all_FDR'] <- gene_fdr
}
# 对subdf的p.value进行整合，当lfc<0时，取neg.p.value的值；
# 当lfc>0时，取pos.p.value的值。
subdf$all_pvalue <- 0
for (gene in Gene) {
gene_pvalue <- df_gene[gene,'neg.p.value']
if (df_gene[gene,"neg.lfc"] < 0) {
gene_pvalue <- df_gene[gene,'neg.p.value']
} else {
gene_pvalue <- df_gene[gene,'pos.p.value']
}
subdf[subdf[,'Gene']==gene,'all_pvalue'] <- gene_pvalue
}
a <- -Inf
b <- Inf
bindex <- as.vector(sapply(seq(1, max(subdf$index), 1),
function(x) {
rep(x, 4)
}))
bgcol <- data.frame(as.vector(bindex))
bgcol$color <- c(rep("bg", length(bindex)))
colnames(bgcol) <- c("id", "value")
bgcol$x <- rep(c(a, b, b, a), max(subdf$index))
bgcol$y <- as.vector(sapply(seq(1, max(subdf$index), 1),
function(x) {
c((interval + binwidth) * (x - 1), (interval + binwidth) *
(x - 1), (interval + binwidth) * x - interval,
(interval + binwidth) * x - interval)
}))
# 这里选择pvalue作为筛选条件
label_list <- subdf[,c("Gene", "index", "all_pvalue")]
label_list <- label_list[order(label_list$index,decreasing = F),]
tmp_lab_dat <- as.data.frame(matrix(1:ncol(label_list),nrow = 1))
colnames(tmp_lab_dat) <- colnames(label_list)
tmp_lab_dat <- tmp_lab_dat[-1,]
for (i in unique(label_list$index)) {
ind_dat  <- label_list[label_list$index==i,]
ind_dat <- ind_dat[1,]
tmp_lab_dat <- rbind(tmp_lab_dat,ind_dat)
}
label_list <- tmp_lab_dat
# 为pvalue 贴上显著性标签，当pvalue>0.05为ns,当pvalue<=0.05为*,当pvalue<=0.01为**，当pvalue<0.001为***。
label_list$pvalue_label <- "a"
for (i in 1:nrow(label_list)) {
if (label_list[i,'all_pvalue']>0.05) {
label_list[i,'pvalue_label'] <- "ns"
}else if (label_list[i,'all_pvalue']<=0.05 & label_list[i,'all_pvalue']>0.01){
label_list[i,'pvalue_label'] <- "*"
}else if (label_list[i,'all_pvalue']<=0.01 & label_list[i,'all_pvalue']>0.001){
label_list[i,'pvalue_label'] <- "**"
}else{
label_list[i,'pvalue_label'] <- "***"
}
}
label_list <- label_list$pvalue_label
# 为不同类型的基因设置不同颜色。
cols <- c(Up = "#E41A1C", Down = "#377EB8", ctrl = "#4DAF4A" , tbg = 608, black = "black")
# 绘制条形码图，其中y轴上，每一行代表一个基因，x轴为LFC的分布轴，每一个条带上的竖线代表这个基因对应的sgRNA在LFC上所在位置
p <- ggplot()
p <- p + geom_polygon(aes_string("x", "y", fill = "value",
group = "id"), color = "gray20", data = bgcol, size = 0.5)
#p <- p + geom_segment(aes_string("LFC", "y", xend = "LFC",
#                                 yend = "yend", color = "color"), size = 0.5, alpha = 0.1, data = df_control)
p <- p + geom_segment(aes_string("LFC", "y", xend = "LFC", yend = "yend", color = "color"), size = 0.8, data = subdf)
p
p <- p + scale_color_manual(values = cols)
p <- p + scale_fill_manual(values = c(bg = 'white'))
p <- p + scale_y_continuous(breaks = bgcol$y[seq(1, nrow(bgcol),4)] + binwidth/2,
labels = geneset,
expand = c(0, 0))
p <- p + labs(x = 'LFC', y = NULL)
# 设置坐标轴字体、颜色
p <- p + theme(text = element_text(colour = "black", size = 18),
plot.title = element_text(hjust = 0.5, size = 18),
axis.text = element_text(colour = "gray10"),
axis.text.y = element_text(face = "italic"),
axis.ticks.y = element_blank(),)
p <- p + theme(axis.line = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(fill=NA, color="black", size=1, linetype="solid"),
panel.background = element_blank())
# 设置是否设立图例
p <- p + theme(legend.position = "none")
# 设置辅助线
p <- p + geom_vline(xintercept =c(0),linetype = 3)
# p <- p + xlim(-5,5)
# 设置显示范围。
p <- p + xlim(-11,11)
# 绘制sgRNA显著性标志
panel_ann <- ggplot()+
annotate("text",x = 0,y = bgcol$y[seq(1, nrow(bgcol),4)] + binwidth/2,label =label_list)  +
theme_void() +
theme(text = element_text(colour = "black", size = 18)) +
xlab("") +ylab("") + scale_y_continuous(breaks = bgcol$y[seq(1, nrow(bgcol),4)] + binwidth/2,label=rep("",length(label_list)), expand = c(0, 0))
df_noctrl<-df%>%mutate(sig=ifelse(grepl("^Intergenic",Gene)|grepl("^Offtarget",Gene),"nontargeted","targeted"))
df_noctrl<-df_noctrl%>%filter(sig!="nontargeted")
# 绘制sgRNA分布密度图
density_plot <- ggplot(df_noctrl,aes(x = LFC)) +
geom_density(color = "black",fill = "gray") +
xlab("") + ylab("") +
# ggtitle('PANC02 E:T=1:1') +
ggtitle('Negative regulators') +
theme_bw() +
theme(panel.border = element_rect(fill=NA, color="black", size=1, linetype="solid"),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
plot.title = element_text(hjust = 0.5)) +
annotate("text", x = Inf, y = Inf, label = 'All sgRNAs', vjust = 1.8, hjust = 1.4)
p <- p %>% insert_right(panel_ann,width = 0.1) %>% insert_top(density_plot,height = 0.15)
ggsave(p,file=paste0(output_path,'sgrna/',title_name," Negative_regulators.pdf"),width=11.69,height=8.27)
}
sgRNA_analysis4sgrna(sgrna_summary_path,gene_summary_path, gene_list, output_path, title_name, binwidth = 0.1,interval = 0)
rm(list=ls())
# 绝对路径
setwd("~/Desktop/sgRNA-analysis/Mageck-Test-analysis/")
# 设置sgrna或gene summary所在路径。
gene_summary_path = "Data/sqh20231106/WT-NK/Mageck-test/WT_vs_NK.gene_summary.txt"
sgrna_summary_path = "Data/sqh20231106/WT-NK/Mageck-test/WT_vs_NK.sgrna_summary.txt"
##### gene summary 结果文件数据分析 #####
# 基因列表，用于在图中展示这些基因。
gene_list = c("Pvr","Nceh1","Tfrc","Slc31a1","Ppic","Neo1","Tmed2","Stt3a")
# 标题名称。
title_name = 'WT vs NK'
output_path = "Result/sqh20231106/sgRNA-Integrative-Analysis/"
# 当LFC_threshold>0时，选择正向筛选的结果；
# 当LFC_threshold<0时，展示负向筛选的结果；
LFC_threshold = -2
# 设置自定义颜色盘,与基因list对应。
my_color_paltte = c("Nceh1" = "#FA7F6F","Pvr"="#C76DA2","Tfrc"="#FFBE7A","Slc31a1"="#BEB8DC","Ppic"="#FFFF77","Neo1"="#8ECFC9","Tmed2"="#99FFFF","Stt3a"="#82B0D2")
#  检查并创造结果文件夹
create_output_dir4sgRNA(output_path)
sgRNA_analysis4gene(gene_summary_path, output_path, gene_list, my_color_paltte, LFC_threshold, title_name)
source("Script/sgRNA-Post-Processing/sgRNA-Integrative-Analysis-Function-Warehouse.R")
# 设置sgrna或gene summary所在路径。
gene_summary_path = "Data/sqh20231106/WT-NK/Mageck-test/WT_vs_NK.gene_summary.txt"
sgrna_summary_path = "Data/sqh20231106/WT-NK/Mageck-test/WT_vs_NK.sgrna_summary.txt"
##### gene summary 结果文件数据分析 #####
# 基因列表，用于在图中展示这些基因。
gene_list = c("Pvr","Nceh1","Tfrc","Slc31a1","Ppic","Neo1","Tmed2","Stt3a")
# 标题名称。
title_name = 'WT vs NK'
output_path = "Result/sqh20231106/sgRNA-Integrative-Analysis/"
# 当LFC_threshold>0时，选择正向筛选的结果；
# 当LFC_threshold<0时，展示负向筛选的结果；
LFC_threshold = -2
# 设置自定义颜色盘,与基因list对应。
my_color_paltte = c("Nceh1" = "#FA7F6F","Pvr"="#C76DA2","Tfrc"="#FFBE7A","Slc31a1"="#BEB8DC","Ppic"="#FFFF77","Neo1"="#8ECFC9","Tmed2"="#99FFFF","Stt3a"="#82B0D2")
#  检查并创造结果文件夹
create_output_dir4sgRNA(output_path)
sgRNA_analysis4gene(gene_summary_path, output_path, gene_list, my_color_paltte, LFC_threshold, title_name)
##### sgrna summary 结果文件数据分析 #####
gene_summary_path = "Data/sqh20231106/WT-NK/Mageck-test/WT_vs_NK.gene_summary.txt"
sgrna_summary_path = "Data/sqh20231106/WT-NK/Mageck-test/WT_vs_NK.sgrna_summary.txt"
output_path = "Result/sqh20231106/sgRNA-Integrative-Analysis/"
title_name = 'WT vs NK'
binwidth = 0.1
interval = 0
sgRNA_analysis4sgrna(sgrna_summary_path,gene_summary_path, gene_list, output_path, title_name, binwidth = 0.1,interval = 0)
