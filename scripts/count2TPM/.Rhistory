}
rm(list=ls())
##### Read expression matrix and signature gene list.
##### Then, carry out data preprocessing
##### 最终输出数据矩阵,包括Z-score标准化之后的基因表达矩阵、分组信息以及基因list，基因list需要与基因表达的名称对应上来。
setwd("~/Desktop/DTP/signature_score_analysis/")
expression<-read.table("../count.all.txt",header = TRUE)
expression<-rename(expression,c("ENSEMBL"="gene_id"))
##### To establish a general "embryonic pausing signature",
# First measured DE in each embryonic model independently
# Gene sigificantly dysregulated in both models were selected for the signature
# Other Gene signatures such as mTORC1 response were obtained from the MSigDB "Hallmark gene sets"
sign_gene<-read.xlsx("Embryonic-Pausing-Signature.xlsx",sheet = 1)
sign_gene<-rename(sign_gene,c("SYMBOL"="Gene"))
View(sign_gene)
# 输入一个基因表达矩阵,其中基因ENSEMBL ID列的列名为ENSEMBL
# 输出一个基因表达矩阵,其中包含转换后的SYMBOL列信息，并且将具有相同SYMBOL的行整合
ENSEMBL2SYMBOL<-function(gene_matrix,OrgDb = "org.Hs.eg.db"){
gene_SYMBOL<-bitr(gene_matrix$ENSEMBL, fromType = 'ENSEMBL',toType = 'SYMBOL',OrgDb = "org.Hs.eg.db")
df<-gene_matrix%>%inner_join(gene_SYMBOL,by="ENSEMBL")
df<-df%>%select(SYMBOL,everything(),-ENSEMBL)
return(df)
}
gene_matrix_preprocessing<-function(gene_matrix,geneList){
gene_matrix<-ENSEMBL2SYMBOL(gene_matrix,"org.Hs.eg.db")
gene_matrix<-gene_matrix%>%inner_join(geneList,by="SYMBOL")
}
gene_matrix_preprocessing(expression,sign_gene)
gene_matrix_preprocessing<-function(gene_matrix,geneList){
gene_matrix<-ENSEMBL2SYMBOL(gene_matrix,"org.Hs.eg.db")
gene_matrix<-gene_matrix%>%inner_join(geneList,by="SYMBOL")
return(gene_matrix)
}
gene_expression<-gene_matrix_preprocessing(expression,sign_gene)
View(gene_expression)
View(gene_expression)
# 制作sample_info 矩阵
Untreated=c("A2403","A2425","A2360","A2353")
# Phase1  "A2428"样本存在问题，因此先将其移除
Phase1=c("A2405","A2400","A2376")
Phase2=c("A2419","A2375","A2421","A2420")
#Phase3=c("A2340","A2347","A2396")
Phase4=c("A2333","A2335","A2388","A2377","A2392")
Phase5=c("A2386","A2387","A2346","A2397")
sample_info<-data.frame(sample=c(Untreated, Phase1, Phase2, Phase4, Phase5),
group = factor(c(rep("T1", length(Untreated)),
rep("T2", length(Phase1)),
rep("T3", length(Phase2)),
rep("T5", length(Phase4)),
rep("T6", length(Phase5)))))
View(sample_info)
View(sample_info)
setwd("~/Desktop/博士生活/科研生活/Hu_lab/Github/Bioinformatics-pipline/scripts/count2TPM/")
# 1) 从featurecounts中得到有效基因长度
expr_df<-read.table("A-2333.featurecounts.all.txt".header=T,row.names=1,check.names=F)
# 1) 从featurecounts中得到有效基因长度
expr_df<-read.table("A-2333.featurecounts.all.txt",header=T,row.names=1,check.names=F)
View(expr_df)
View(expr_df)
# 1) 从featurecounts中得到有效基因长度
expr_df<-read.table("A-2333.featurecounts.all.txt",row.names=1,check.names=F)
View(expr_df)
# 1) 从featurecounts中得到有效基因长度
expr_df<-read.table("A-2333.featurecounts.all.txt",header=T,row.names=0,check.names=F)
# 1) 从featurecounts中得到有效基因长度
expr_df<-read.table("A-2333.featurecounts.all.txt",header=T,row.names=F,check.names=F)
# 1) 从featurecounts中得到有效基因长度
expr_df<-read.table("A-2333.featurecounts.all.txt",header=T,check.names=F)
View(expr_df)
View(expr_df)
View(expr_df)
gene_lenth<-expr_df%>%select(ENSEMBL=Geneid,Length)
library(openxlsx)
gene_len<-expr_df%>%select(ENSEMBL=Geneid,Length)
write.xlsx(gene_len,"gene_len.xlsx")
library(xlsx)
write.xlsx(gene_len,"gene_len.xlsx")
write.csv(gene_len,"gene_len.csv")
write.csv(gene_len,"gene_len.csv",row.names = T)
write.csv(gene_len,"gene_len.csv",row.names = F)
library(parallel)
BiocManager::install("GenomicFeatures")
library(GenomicFeatures)
cl<-makeCluster(0.75*detectCores())
View(cl)
# 1) 从featurecounts中得到有效基因长度
expr_df<-read.table("A-2333.featurecounts.all.txt",header=T,check.names=F)
gene_len<-expr_df%>%select(ENSEMBL=Geneid,Length)
gene_len<-expr_df%>%dplyr::select(ENSEMBL=Geneid,Length)
write.csv(gene_len,"gene_len.csv",row.names = F)
# 2)从gtf文件中计算有效基因长度
hg38db<-makeTxDbFromGFF("Homo_sapiens.GRCh38.110.gtf",format="gtf")
# 2)从gtf文件中计算有效基因长度
hg38db<-makeTxDbFromGFF("Homo_sapiens.GRCh38.110.gtf",format="gtf")
# 提取外显子
exons_gene<-exonsBy(hg38db,by="gene")
head(exons_gene)
# 计算总外显子长度：用reduce去掉重复冗余的部分，width统计长度，最后计算总长度。
exons_gene_lens<-parLapply(cl,exons_gene,function(x){sum(width(reduce(x)))})
exons_gene_lens[1:10]
# 转换为dataframe
gene_efflen_Homo_sapiens.GRCh38.110<-data.frame(EMSEMBL=names(exons_gene_lens),
efflen=as.numeric(exons_gene_lens))
View(gene_efflen_Homo_sapiens.GRCh38.110)
View(gene_len)
write.csv(gene_efflen_Homo_sapiens.GRCh38.110,"gene_efflen_Homo_sapiens.GRCh38.110.csv",rownames=F)
write.csv(gene_efflen_Homo_sapiens.GRCh38.110,"gene_efflen_Homo_sapiens.GRCh38.110.csv",row.names=F)
# 1) 从featurecounts中得到有效基因长度
expr_df<-read.table("A-2333.featurecounts.all.txt",header=T,check.names=F)
gene_efflen<-expr_df%>%dplyr::select(ENSEMBL=Geneid,efflen=Length)
write.csv(gene_efflen,"gene_len.csv",row.names = F)
View(expression)
####### convert raw reads counts to cpm/tpm/fpkm
# 注意gene_matrix需要满足一下格式，第一列为ENSEMBL,记录基因的ENSEMBL id；
# 后续列为每个样本在这个基因上的read counts数
# define count2TPM function
count2tpm<-function(gene_matrix,gene_efflen){
gene_matrix<-gene_matrix%>%inner_join(gene_efflen,by="ENSEMBL")
# 将非表达列
gene_matrix<-gene_matrix%>%dplyr::select(ENSEMBL,efflen,everything())
expr_df<-gene_matrix[,-(1:2)]
# convert the data type of the expr_df columns to numeric.
expr_df<-apply(expr_df,2,as.numeric)
# 基因长度，目标基因的外显子长度之和除以1000，单位是kb，不是bp
kb<-gene_matrix$efflen/1000
# per thousand scaling factor 每千碱基reads 长度标准化。
rpk<-expr_df/kb
# per million scaling factor 每百万缩放因子
tpm <-t(t(rpk)/colSums(rpk)*1000000)
gene_matrix[,-(1:2)]<-tpm
gene_matrix<-gene_matrix%>%dplyr::select(-efflen)
return(gene_matrix)
}
# define count2fpkm function
count2fpkm<-function(gene_matrix,gene_efflen){
gene_matrix<-gene_matrix%>%inner_join(gene_efflen,by="ENSEMBL")
gene_matrix<-gene_matrix%>%dplyr::select(ENSEMBL,,efflen,everything())
expr_df<-gene_matrix[,-(1:2)]
# convert the data type of the expr_df columns to numeric.
expr_df<-apply(expr_df,2,as.numeric)
# 基因长度，目标基因的外显子长度之和除以1000，单位是kb，不是bp
kb<-gene_matrix$efflen/1000
# per thousand scaling factor 每千碱基reads 长度标准化。
rpk<-expr_df/kb
fpkm<-t(t(rpk)/colSums(expr_df)*10^6)
gene_matrix[,-(1:2)]<-fpkm
return(gene_matrix)
}
# define count2cpm function
count2cpm<-function(gene_matrix){
expr_df<-gene_matrix[,-1]
# convert the data type of the expr_df columns to numeric.
expr_df<-apply(expr_df,2,as.numeric)
cpm<-t(t(expr_df)/colSums(expr_df)*1000000)
gene_matrix[,-1]<-cpm
return(gene_matrix)
}
sample_info
gene_efflen
View(expression)
gene_efflen
gene_matrix<-expression
# 1) convert raw counts to tpm
gene_matrix<-count2tpm(gene_matrix,gene_efflen)
View(gene_matrix)
# 将ENSEMBL ID转换为SYMBOL
gene_matrix<-ENSEMBL2SYMBOL(gene_matrix,"org.Hs.eg.db")
# 输入一个基因表达矩阵,其中基因ENSEMBL ID列的列名为ENSEMBL
# 输出一个基因表达矩阵,其中包含转换后的SYMBOL列信息，并且将具有相同SYMBOL的行整合
ENSEMBL2SYMBOL<-function(gene_matrix,OrgDb = "org.Hs.eg.db"){
gene_SYMBOL<-bitr(gene_matrix$ENSEMBL, fromType = 'ENSEMBL',toType = 'SYMBOL',OrgDb = "org.Hs.eg.db")
df<-gene_matrix%>%inner_join(gene_SYMBOL,by="ENSEMBL")
df<-df%>%dplyr::select(SYMBOL,everything(),-ENSEMBL)
return(df)
}
# 将ENSEMBL ID转换为SYMBOL
gene_matrix<-ENSEMBL2SYMBOL(gene_matrix,"org.Hs.eg.db")
View(gene_matrix)
View(gene_matrix)
rownames(gene_matrix)<-gene_matrix$SYMBOL
View(gene_matrix)
View(gene_matrix)
gene_matrix%>%group_by(SYMBOL)%>%summarise()
gene_matrix%>%group_by(SYMBOL)%>%summarise(across(.col=-SYMBOL,.fns=sum))
gene_matrix%>%group_by(SYMBOL)
gene_matrix%>%group_by(SYMBOL)%>%summarise(across(.col=-c("SYMBOL"),.fns=sum))
gene_matrix%>%group_by(SYMBOL)%>%summarise(across(everything(),sum))
unique_gene_matrix<-gene_matrix%>%group_by(SYMBOL)%>%summarise(across(everything(),sum))
sample_info
# 4) 根据sample_info选择需要分析的列
expression<-unique_gene_matrix[,intersect(names(unique_gene_matrix),sample_info$sample),drop=FALSE]
View(expression)
View(unique_gene_matrix)
# 4) 根据sample_info选择需要分析的列
rownames(unique_gene_matrix)<-unique_gene_matrix$SYMBOL
View(unique_gene_matrix)
expression<-unique_gene_matrix[,intersect(names(unique_gene_matrix),sample_info$sample),drop=FALSE]
View(expression)
# 3) 合并具有相同SYMBOL名的行，将其TPM相加
unique_gene_matrix<-gene_matrix%>%group_by(SYMBOL)%>%summarise(across(everything(),sum))
# 4) 根据sample_info选择需要分析的列
expression<-unique_gene_matrix[,intersect(names(unique_gene_matrix),c(SYMBOL,sample_info$sample)),drop=FALSE]
View(unique_gene_matrix)
# 4) 根据sample_info选择需要分析的列
expression<-unique_gene_matrix[,intersect(names(unique_gene_matrix),c("SYMBOL",sample_info$sample)),drop=FALSE]
View(expression)
geneList<-sign_gene
View(sign_gene)
# 5) 根据geneList选择出相关的基因
expression<-expression%>%inner_join(geneList,by="SYMBOL")
View(expression)
# 5) 根据geneList选择出相关的基因
# 如果geneList 的列数超过1，则暗示其中包含有Weight列，需要额外处理
len(geneList)
# 5) 根据geneList选择出相关的基因
# 如果geneList 的列数超过1，则暗示其中包含有Weight列，需要额外处理
length(geneList)
test <- data.frame(A = c(1, 2, 3, 4, 5),
B = c(10, 20, 30, 40, 50))
scale(test,scale = 1)
test <- data.frame(A = c(1, 2, 3, 4, 5),
B = c(10, 20, 30, 40, 50))
scale(data, center = TRUE, scale = 1)
scale(test, center = TRUE, scale = 1)
View(expression)
# 4) 根据sample_info选择需要分析的列
expression<-unique_gene_matrix[,intersect(names(unique_gene_matrix),c("SYMBOL",sample_info$sample)),drop=FALSE]
View(exons_gene_lens)
View(expression)
expression[,-1]
# 5) 对每一行做标准化处理
expression[,-1]<-t(scale(t(expression[,-1])))
View(expression)
# 5) 根据geneList选择出相关的基因
# 如果geneList 的列数超过1，则暗示其中包含有Weight列，需要额外处理
expression<-expression%>%inner_join(geneList,by="SYMBOL")
View(expression)
expression[,-c(1,2)]*expression$Weight
expression%>%dplyr::select(SYMBOL,Weight,everything())
expression[,-c(1,2)]*expression$Weight
length(geneList)
length(geneList$SYMBOL)
length(geneList[,1])
length(geneList[,c(1,2)])
length(rownames(geneList[,c(1)]))
length(data.frame(ID=1:5))
View(expression)
gene_matrix_preprocessing<-function(gene_matrix,geneList,sample_info,gene_efflen){
# 1) convert raw counts to tpm
gene_matrix<-count2tpm(gene_matrix,gene_efflen)
# 2)将ENSEMBL ID转换为SYMBOL
gene_matrix<-ENSEMBL2SYMBOL(gene_matrix,"org.Hs.eg.db")
# 3) 合并具有相同SYMBOL名的行，将其TPM相加
unique_gene_matrix<-gene_matrix%>%group_by(SYMBOL)%>%summarise(across(everything(),sum))
# 4) 根据sample_info选择需要分析的列
expression<-unique_gene_matrix[,intersect(names(unique_gene_matrix),c("SYMBOL",sample_info$sample)),drop=FALSE]
# 5) 对每一行做zscore标准化处理
expression[,-1]<-t(scale(t(expression[,-1])))
# 5) 根据geneList选择出相关的基因
# 如果geneList 的列数超过1，则暗示其中包含有Weight列，需要额外处理
expression<-expression%>%inner_join(geneList,by="SYMBOL")
if(length(geneList)>1){
expression%>%dplyr::select(SYMBOL,Weight,everything())
# 如果geneList超过1,则将其表达值乘上Weight
expression<-expression[,-c(1,2)]*expression$Weight
expression<-expression%>%dplyr::select(-Weight)
}
return(expression)
}
gene_matrix_preprocessing<-function(gene_matrix,geneList,sample_info,gene_efflen){
# 1) convert raw counts to tpm
gene_matrix<-count2tpm(gene_matrix,gene_efflen)
# 2)将ENSEMBL ID转换为SYMBOL
gene_matrix<-ENSEMBL2SYMBOL(gene_matrix,"org.Hs.eg.db")
# 3) 合并具有相同SYMBOL名的行，将其TPM相加
unique_gene_matrix<-gene_matrix%>%group_by(SYMBOL)%>%summarise(across(everything(),sum))
# 4) 根据sample_info选择需要分析的列
gene_expression<-unique_gene_matrix[,intersect(names(unique_gene_matrix),c("SYMBOL",sample_info$sample)),drop=FALSE]
# 5) 对每一行做zscore标准化处理
gene_expression[,-1]<-t(scale(t(gene_expression[,-1])))
# 5) 根据geneList选择出相关的基因
# 如果geneList 的列数超过1，则暗示其中包含有Weight列，需要额外处理
gene_expression<-gene_expression%>%inner_join(geneList,by="SYMBOL")
if(length(geneList)>1){
gene_expression%>%dplyr::select(SYMBOL,Weight,everything())
# 如果geneList超过1,则将其表达值乘上Weight
gene_expression<-gene_expression[,-c(1,2)]*gene_expression$Weight
gene_expression<-gene_expression%>%dplyr::select(-Weight)
}
return(gene_expression)
}
expression<-read.table("../count.all.txt",header = TRUE)
expression<-rename(expression,c("ENSEMBL"="gene_id"))
rm(list=ls())
##### Read expression matrix and signature gene list.
##### Then, carry out data preprocessing
##### 最终输出数据矩阵,包括Z-score标准化之后的基因表达矩阵、分组信息以及基因list，基因list需要与基因表达的名称对应上来。
setwd("~/Desktop/DTP/signature_score_analysis/")
expression<-read.table("../count.all.txt",header = TRUE)
expression<-rename(expression,c("ENSEMBL"="gene_id"))
View(expression)
expression<-read.table("../count.all.txt",header = TRUE)
expression<-rename(expression,c("ENSEMBL"="gene_id"))
View(expression)
expression
View(expression)
expression<-rename(expression,c("ENSEMBL"="gene_id"))
expression<-read.table("../count.all.txt",header = TRUE)
expression<-rename(expression,c(ENSEMBL=gene_id))
View(expression)
expression<-rename(expression,c(ENSEMBL=gene_id))
expression<-rename(expression,c(ENSEMBL="gene_id"))
expression<-rename(expression,ENSEMBL=gene_id)
##### To establish a general "embryonic pausing signature",
# First measured DE in each embryonic model independently
# Gene sigificantly dysregulated in both models were selected for the signature
# Other Gene signatures such as mTORC1 response were obtained from the MSigDB "Hallmark gene sets"
sign_gene<-read.xlsx("Embryonic-Pausing-Signature.xlsx",sheet = 1)
expression<-rename(expression,ENSEMBL=expression$gene_id)
expression<-read.table("../count.all.txt",header = TRUE)
View(expression)
expression<-expression%>%dplyr::select(ENSEMBL=gene_id,everything())
View(expression)
expression<-read.table("../count.all.txt",header = TRUE)
expression<-expression%>%dplyr::select(ENSEMBL=gene_id,everything())
##### To establish a general "embryonic pausing signature",
# First measured DE in each embryonic model independently
# Gene sigificantly dysregulated in both models were selected for the signature
# Other Gene signatures such as mTORC1 response were obtained from the MSigDB "Hallmark gene sets"
sign_gene<-read.xlsx("Embryonic-Pausing-Signature.xlsx",sheet = 1)
sign_gene<-rename(sign_gene,c("SYMBOL"="Gene"))
search(rename)
##### To establish a general "embryonic pausing signature",
# First measured DE in each embryonic model independently
# Gene sigificantly dysregulated in both models were selected for the signature
# Other Gene signatures such as mTORC1 response were obtained from the MSigDB "Hallmark gene sets"
sign_gene<-read.xlsx("Embryonic-Pausing-Signature.xlsx",sheet = 1)
sign_gene<-sign_gene%>%dplyr::select(SYMBOL=Gene,everything())
View(sign_gene)
# 制作sample_info 矩阵
Untreated=c("A2403","A2425","A2360","A2353")
# Phase1  "A2428"样本存在问题，因此先将其移除
Phase1=c("A2405","A2400","A2376")
Phase2=c("A2419","A2375","A2421","A2420")
#Phase3=c("A2340","A2347","A2396")
Phase4=c("A2333","A2335","A2388","A2377","A2392")
Phase5=c("A2386","A2387","A2346","A2397")
sample_info<-data.frame(sample=c(Untreated, Phase1, Phase2, Phase4, Phase5),
group = factor(c(rep("T1", length(Untreated)),
rep("T2", length(Phase1)),
rep("T3", length(Phase2)),
rep("T5", length(Phase4)),
rep("T6", length(Phase5)))))
# 输入一个基因表达矩阵,其中基因ENSEMBL ID列的列名为ENSEMBL
# 输出一个基因表达矩阵,其中包含转换后的SYMBOL列信息，并且将具有相同SYMBOL的行整合
ENSEMBL2SYMBOL<-function(gene_matrix,OrgDb = "org.Hs.eg.db"){
gene_SYMBOL<-bitr(gene_matrix$ENSEMBL, fromType = 'ENSEMBL',toType = 'SYMBOL',OrgDb = "org.Hs.eg.db")
df<-gene_matrix%>%inner_join(gene_SYMBOL,by="ENSEMBL")
df<-df%>%dplyr::select(SYMBOL,everything(),-ENSEMBL)
return(df)
}
gene_matrix_preprocessing<-function(gene_matrix,geneList,sample_info,gene_efflen){
# 1) convert raw counts to tpm
gene_matrix<-count2tpm(gene_matrix,gene_efflen)
# 2)将ENSEMBL ID转换为SYMBOL
gene_matrix<-ENSEMBL2SYMBOL(gene_matrix,"org.Hs.eg.db")
# 3) 合并具有相同SYMBOL名的行，将其TPM相加
unique_gene_matrix<-gene_matrix%>%group_by(SYMBOL)%>%summarise(across(everything(),sum))
# 4) 根据sample_info选择需要分析的列
gene_expression<-unique_gene_matrix[,intersect(names(unique_gene_matrix),c("SYMBOL",sample_info$sample)),drop=FALSE]
# 5) 对每一行做zscore标准化处理
gene_expression[,-1]<-t(scale(t(gene_expression[,-1])))
# 5) 根据geneList选择出相关的基因
# 如果geneList 的列数超过1，则暗示其中包含有Weight列，需要额外处理
gene_expression<-gene_expression%>%inner_join(geneList,by="SYMBOL")
if(length(geneList)>1){
gene_expression%>%dplyr::select(SYMBOL,Weight,everything())
# 如果geneList超过1,则将其表达值乘上Weight
gene_expression<-gene_expression[,-c(1,2)]*gene_expression$Weight
gene_expression<-gene_expression%>%dplyr::select(-Weight)
}
return(gene_expression)
}
gene_efflen<-read.csv("gene_efflen.csv")
View(gene_efflen)
gene_expression<-gene_matrix_preprocessing(expression,sign_gene,sample_info,gene_efflen)
####### convert raw reads counts to cpm/tpm/fpkm
# 注意gene_matrix需要满足一下格式，第一列为ENSEMBL,记录基因的ENSEMBL id；
# 后续列为每个样本在这个基因上的read counts数
# define count2TPM function
count2tpm<-function(gene_matrix,gene_efflen){
gene_matrix<-gene_matrix%>%inner_join(gene_efflen,by="ENSEMBL")
# 将非表达列
gene_matrix<-gene_matrix%>%dplyr::select(ENSEMBL,efflen,everything())
expr_df<-gene_matrix[,-(1:2)]
# convert the data type of the expr_df columns to numeric.
expr_df<-apply(expr_df,2,as.numeric)
# 基因长度，目标基因的外显子长度之和除以1000，单位是kb，不是bp
kb<-gene_matrix$efflen/1000
# per thousand scaling factor 每千碱基reads 长度标准化。
rpk<-expr_df/kb
# per million scaling factor 每百万缩放因子
tpm <-t(t(rpk)/colSums(rpk)*1000000)
gene_matrix[,-(1:2)]<-tpm
gene_matrix<-gene_matrix%>%dplyr::select(-efflen)
return(gene_matrix)
}
gene_expression<-gene_matrix_preprocessing(expression,sign_gene,sample_info,gene_efflen)
View(gene_expression)
gene_matrix_preprocessing<-function(gene_matrix,geneList,sample_info,gene_efflen){
# 1) convert raw counts to tpm
gene_matrix<-count2tpm(gene_matrix,gene_efflen)
# 2)将ENSEMBL ID转换为SYMBOL
gene_matrix<-ENSEMBL2SYMBOL(gene_matrix,"org.Hs.eg.db")
# 3) 合并具有相同SYMBOL名的行，将其TPM相加
unique_gene_matrix<-gene_matrix%>%group_by(SYMBOL)%>%summarise(across(everything(),sum))
# 4) 根据sample_info选择需要分析的列
gene_expression<-unique_gene_matrix[,intersect(names(unique_gene_matrix),c("SYMBOL",sample_info$sample)),drop=FALSE]
# 5) 对每一行做zscore标准化处理
gene_expression[,-1]<-t(scale(t(gene_expression[,-1])))
# 5) 根据geneList选择出相关的基因
# 如果geneList 的列数超过1，则暗示其中包含有Weight列，需要额外处理
gene_expression<-gene_expression%>%inner_join(geneList,by="SYMBOL")
if(length(geneList)>1){
gene_expression%>%dplyr::select(SYMBOL,Weight,everything())
# 如果geneList超过1,则将其表达值乘上Weight
gene_expression[,-c(1,2)]<-gene_expression[,-c(1,2)]*gene_expression$Weight
gene_expression<-gene_expression%>%dplyr::select(-Weight)
}
return(gene_expression)
}
gene_efflen<-read.csv("gene_efflen.csv")
gene_expression<-gene_matrix_preprocessing(expression,sign_gene,sample_info,gene_efflen)
View(gene_expression)
gene_expression
rm(list=ls())
library(tidyverse)
library(openxlsx)
library(ggplot2)
library(ggpubr)
library(clusterProfiler)
rm(list=ls())
##### Read expression matrix and signature gene list.
##### Then, carry out data preprocessing
##### 最终输出数据矩阵,包括Z-score标准化之后的基因表达矩阵、分组信息以及基因list，基因list需要与基因表达的名称对应上来。
setwd("~/Desktop/DTP/signature_score_analysis/")
expression<-read.table("../count.all.txt",header = TRUE)
expression<-expression%>%dplyr::select(ENSEMBL=gene_id,everything())
##### To establish a general "embryonic pausing signature",
# First measured DE in each embryonic model independently
# Gene sigificantly dysregulated in both models were selected for the signature
# Other Gene signatures such as mTORC1 response were obtained from the MSigDB "Hallmark gene sets"
sign_gene<-read.xlsx("Embryonic-Pausing-Signature.xlsx",sheet = 1)
sign_gene<-sign_gene%>%dplyr::select(SYMBOL=Gene,everything())
# 制作sample_info 矩阵
Untreated=c("A2403","A2425","A2360","A2353")
# Phase1  "A2428"样本存在问题，因此先将其移除
Phase1=c("A2405","A2400","A2376")
Phase2=c("A2419","A2375","A2421","A2420")
#Phase3=c("A2340","A2347","A2396")
Phase4=c("A2333","A2335","A2388","A2377","A2392")
Phase5=c("A2386","A2387","A2346","A2397")
sample_info<-data.frame(sample=c(Untreated, Phase1, Phase2, Phase4, Phase5),
group = factor(c(rep("T1", length(Untreated)),
rep("T2", length(Phase1)),
rep("T3", length(Phase2)),
rep("T5", length(Phase4)),
rep("T6", length(Phase5)))))
# 输入一个基因表达矩阵,其中基因ENSEMBL ID列的列名为ENSEMBL
# 输出一个基因表达矩阵,其中包含转换后的SYMBOL列信息，并且将具有相同SYMBOL的行整合
ENSEMBL2SYMBOL<-function(gene_matrix,OrgDb = "org.Hs.eg.db"){
gene_SYMBOL<-bitr(gene_matrix$ENSEMBL, fromType = 'ENSEMBL',toType = 'SYMBOL',OrgDb = "org.Hs.eg.db")
df<-gene_matrix%>%inner_join(gene_SYMBOL,by="ENSEMBL")
df<-df%>%dplyr::select(SYMBOL,everything(),-ENSEMBL)
return(df)
}
gene_matrix_preprocessing<-function(gene_matrix,geneList,sample_info,gene_efflen){
# 1) convert raw counts to tpm
gene_matrix<-count2tpm(gene_matrix,gene_efflen)
# 2)将ENSEMBL ID转换为SYMBOL
gene_matrix<-ENSEMBL2SYMBOL(gene_matrix,"org.Hs.eg.db")
# 3) 合并具有相同SYMBOL名的行，将其TPM相加
unique_gene_matrix<-gene_matrix%>%group_by(SYMBOL)%>%summarise(across(everything(),sum))
# 4) 根据sample_info选择需要分析的列
gene_expression<-unique_gene_matrix[,intersect(names(unique_gene_matrix),c("SYMBOL",sample_info$sample)),drop=FALSE]
# 5) 对每一行做zscore标准化处理
gene_expression[,-1]<-t(scale(t(gene_expression[,-1])))
# 5) 根据geneList选择出相关的基因
# 如果geneList 的列数超过1，则暗示其中包含有Weight列，需要额外处理
gene_expression<-gene_expression%>%inner_join(geneList,by="SYMBOL")
if(length(geneList)>1){
gene_expression%>%dplyr::select(SYMBOL,Weight,everything())
# 如果geneList超过1,则将其表达值乘上Weight
gene_expression[,-c(1,2)]<-gene_expression[,-c(1,2)]*gene_expression$Weight
gene_expression<-gene_expression%>%dplyr::select(-Weight)
}
return(gene_expression)
}
# 读取有效基因长度矩阵，用于计算TPM
gene_efflen<-read.csv("gene_efflen.csv")
gene_expression<-gene_matrix_preprocessing(expression,sign_gene,sample_info,gene_efflen)
# 调用自定义函数库
source('count2TPM.R')
# 调用自定义函数库
source('count2TPM.R')
# 调用自定义函数库
source('count2TPM.R')
rm(list=ls())
# 调用自定义函数库
source('count2TPM.R')
# 调用自定义函数库
source('count2TPM.R')
